---
layout: post
section: "On Being Architect"
title: "Leading with Language: Six Plays for Grounded IT Architects"
position: 6013
date:   2021-10-21 21:12:01 +0100
author: by Željko Obrenović (obren.io)
permalink: leading-with-language
icon: leadership.png
timetoread: 15 min
excerpt: "IT Architects can transform their effectiveness and foster a more collaborative, innovative, and grounded practice by consciously applying David Marquet's six linguistic leadership plays to better navigate the complexities of modern technology environments."

---

<img style="margin-top: -20px; width: 100%; height: 400px; object-fit: cover" 
     src="assets/images/istock/iStock-1939500878.jpg">
<div style="font-size: 70%; margin-top: -16px; color: grey; margin-bottom: 12px">
Image by <a target="_blank" href="https://www.istockphoto.com/en/portfolio/jacoblund">jacoblund</a> from <a target="_blank" href="https://www.istockphoto.com/">iStock</a>
</div>
> **IN THIS SECTION, YOU WILL:**  Understand how IT Architects can transform their effectiveness and foster a more collaborative, innovative, and grounded practice by consciously applying David Marquet's six linguistic leadership plays to better navigate the complexities of modern technology environments.
> 
> **KEY POINTS:**
> * IT Architects can significantly enhance their leadership and influence by adopting six key communication "plays" from David Marquet's "Leadership is Language," moving beyond outdated Industrial Age command-and-control styles.
> * These plays—Control the Clock, Collaborate, Commit, Complete, Improve, and Connect—provide practical linguistic tools to foster better thinking (Bluework), more effective execution (Redwork), and stronger team engagement.
> * Applying these plays helps architects build trust, flatten power gradients, encourage psychological safety, and unlock discretionary effort, leading to more robust architectural solutions and greater buy-in.
> * The principles align directly with a "Grounded Architecture" approach by promoting data-driven decisions, collaborative networks, adaptability, and strategic impact within organizations.
> * By consciously changing their language, architects can cultivate a more innovative, resilient, and effective engineering culture.
<style>
 .quote {
     border-left: 8px solid #d9ead3;
     padding-left: 36px;
     margin-top: 30px;
     margin-bottom: 40px;
     font-size: 140%;
     font-style: normal;
     color:#888;
 }
    @media only screen and (max-width: 768px) {
        [class="quote"] {
            display: none;
        }
    }
</style>

<style>
h2 {
    margin-top: 40px
}
h3 {
    margin-top: 40px
}
</style>
<br>

In today's rapidly evolving technological landscape, the role of the IT Architect has become increasingly vital. Architects are no longer just technical designers; they are strategic leaders, influencers, and facilitators of collaboration, essential for navigating complexity and driving business value. This expanded role requires a sophisticated approach to leadership that moves beyond traditional "command and control" models. Such outdated paradigms, rooted in the Industrial Age, are ill-suited for the dynamic, knowledge-driven environment of modern IT, where architects often lead by influence rather than direct authority. In this context, communication is not just a skill—it is the primary tool of leadership.

This challenge is precisely what L. David Marquet addresses in his seminal work, "Leadership is Language." Marquet, a former U.S. Navy Captain, posits that the words leaders use profoundly shape team culture, effectiveness, and overall success. He argues that subtle shifts in language can catalyze dramatic improvements in team performance and well-being, challenging the entrenched leadership paradigms of the Industrial Age and proposing a "New Playbook" fit for contemporary challenges. The core of this new playbook lies in understanding that the nature of work has changed. Industrial Age leadership focused on maximizing efficiency and ensuring compliance for predominantly physical, repetitive tasks. However, IT architecture is characterized by complex, cognitive, and collaborative teamwork. This type of work thrives not on mere compliance, which elicits only minimum effort, but on commitment, which unlocks discretionary effort and innovation. Applying outdated leadership language to architectural work inadvertently stifles the very creativity and engagement necessary for success. Organizations that fail to adapt their leadership language within their architectural practices may struggle with innovation, adaptability, and the ability to attract and retain top talent.

The principles espoused in "Leadership is Language" resonate deeply with the philosophy of "Grounded Architecture." This approach emphasizes data-driven decision-making, the cultivation of collaborative networks, inherent adaptability, and unwavering strategic alignment. Marquet's six leadership "plays" offer practical linguistic tools that directly support these tenets. They empower architects to foster clearer communication, enable deeper thinking, and build stronger, more committed teams, thereby helping them become more truly "grounded." A critical, often invisible barrier that IT architects must consciously address is the "power gradient"—the perceived hierarchical distance between individuals. Steep power gradients can stifle creativity, suppress valuable input, and hinder open communication, all of which are detrimental to effective architectural practice. Architects frequently operate within complex organizational structures where such gradients are prevalent. If these dynamics are not managed through intentional language, true collaboration—a cornerstone of Grounded Architecture—cannot flourish. Marquet's plays provide concrete strategies to flatten these gradients and promote more inclusive and effective interactions.

## Setting the Stage: From "Redwork/Bluework" to Effective Action

Before exploring specific plays, it's essential to grasp a fundamental concept from Marquet's framework: the distinction between "Redwork" and "Bluework." This distinction clarifies the different operational modes within any team and highlights the importance of balancing them for optimal performance.

**Redwork** refers to the "doing" or "execution" phase of any project. It emphasizes performance, efficiency, and minimizing variability to achieve a specific outcome. In the context of IT architecture, Redwork includes activities such as coding a proof-of-concept based on a defined specification, meticulously documenting a finalized architectural design, or implementing a system according to a detailed plan. The primary focus during Redwork is on execution and achieving predetermined goals.

**Bluework**, on the other hand, represents the "thinking" or "decision-making" phase. This mode embraces variability and is characterized by reflection, planning, strategic problem-solving, and collaboration. For IT architects, Bluework is their natural environment; it encompasses strategic design sessions, the analysis of various technological options, the evaluation of emerging technologies, and collaborative workshops aimed at addressing complex architectural challenges.

Marquet stresses the critical importance of **oscillation** between these two modes. Effective teams and their leaders must consciously and deliberately shift between periods of Redwork and Bluework. Being entrenched in one mode while neglecting the other can be detrimental. For instance, excessive Bluework can lead to "analysis paralysis," while an overemphasis on Redwork without sufficient Bluework can result in rushed and poorly conceived solutions.

![](assets/images/figures/redwork-bluework.png)
***Figure 1:** The dynamic between "Blue Work" (thinking/deciding) and "Red Work" (doing/executing), and the importance of consciously switching between the two modes to lead more effectively. This model encourages a conscious, rhythmic cycle of thinking and doing, where teams pause to reflect, adjust, and act deliberately, breaking the habit of reflexive execution or analysis.*

ing architects, into a state of perpetual Redwork, sacrificing crucial thinking time. Recognizing the current "work mode" of the team enables architects to employ the appropriate language and leadership play, either to facilitate deeper thinking or to drive effective execution.

Failing to distinguish and manage the balance between Redwork and Bluework often leads to common architectural pitfalls. Symptoms like "analysis paralysis," where teams become stuck in endless deliberation (excessive Bluework), or "rushed, flawed implementations," which stem from inadequate thinking and premature execution (insufficient Bluework before Redwork), are frequent occurrences. Marquet's plays, such as "Control the Clock" to shift into Bluework or "Commit" to transition into Redwork, offer the necessary mechanisms for effectively navigating these modes. 

Moreover, Marquet's framework suggests a democratization of Bluework; it should not be the exclusive domain of architects or senior leadership. In fact, "Bluework is for everyone, not just leadership." This perspective challenges traditional hierarchies that may portray architects as the sole "thinkers." For the "Grounded Architecture" approach, which advocates for collaborative networks, architects should use language that actively invites all team members into Bluework activities, such as design sessions or problem-solving workshops. Such inclusivity enriches the decision-making process by incorporating diverse perspectives and fostering a shared sense of ownership.

## The Six Leadership Plays in the Architect's Arena

Marquet outlines six specific "plays" that leaders can use to transform their communication and, consequently, their team's performance. These plays offer a new language for leadership, moving away from outdated Industrial Age scripts. The following table provides a concise overview of these plays and their relevance for IT Architects:

| Play | Core Principle (Shift From -> To) | Key Benefit for IT Architects | Key Marquet Phrase/Concept |
| :------------------------ | :-------------------------------------------- | :------------------------------------------------------------- | :------------------------------------------------------------- |
| Control the Clock | Obeying the clock -> **Controlling the clock** | Enables strategic pauses, better decisions, reduces errors | "Make a pause possible," "Shift to Bluework"  |
| Collaborate | Coercing -> **Collaborating** | Leverages collective wisdom, fosters innovation, builds buy-in | "Let the doers be the deciders," "Vote first, then discuss"  |
| Commit | Complying -> **Committing** | Drives ownership, unlocks discretionary effort, ensures follow-through | "Commit to learn, not just do," "Discretionary effort"  |
| Complete | Continuing indefinitely -> **Completing defined goals** | Provides closure, facilitates learning, focuses on outcomes | "Chunk it small," "Celebrate success"  |
| Improve | Proving ability -> **Improving outcomes** | Cultivates a learning culture, continuous enhancement, reduces fear | "What can we learn?" "How can we make it better?"  |
| Connect | Conforming to roles -> **Connecting with people** | Builds trust, encourages psychological safety, authentic engagement | "Flatten power gradients," "Trust first"  |

### A. Play 1: Control the Clock, Don't Obey the Clock

**Introduction to the Play:**
The "Control the Clock" play is about the deliberate act of pausing action (Redwork) to create space for thinking, reflection, and decision-making (Bluework). It challenges the pervasive pressure to constantly "do" by advocating for intentional shifts into strategic thinking mode. Marquet emphasizes that leaders have a responsibility to not only make such pauses possible but also to actively call for them, particularly when teams are deeply immersed in Redwork and may not recognize the need to pause themselves. As an example, language such as, "We have time to do this right, not twice," can signal that a pause is not only acceptable but encouraged.

<br>
<img style="margin-top: -20px; width: 100%; height: 400px; object-fit: cover" 
     src="assets/images/istock/iStock-1060502236.jpg">
<div style="font-size: 70%; margin-top: -16px; color: grey; margin-bottom: 12px">
Image by <a target="_blank" href="https://www.istockphoto.com/en/portfolio/Lazy-Bear">Lazy_Bear</a> from <a target="_blank" href="https://www.istockphoto.com/">iStock</a>
</div>

**Relevance for IT Architects:**
IT architects frequently operate under intense pressure to deliver solutions quickly. The "Control the Clock" play empowers them to carve out vital moments for strategic architectural reviews, ensuring alignment with broader goals, and preventing costly errors that might arise from rushed decisions. This play is instrumental in helping architects avoid the common trap of "solutioneering"—jumping to solutions before the problem is fully understood or alternative approaches have been adequately explored—a frequent occurrence in fast-paced IT environments.

**Examples in IT Architecture:**
*   **Scenario 1 (Design Phase):** An architect leading the design of a critical new system observes the team converging prematurely on a specific technology choice. They can "control the clock" by stating, "Let's pause the 'how' for a moment. Are we all aligned on the 'what' and 'why'? What are the 2-3 core problems this specific component needs to solve?" This language shifts the team from Redwork (selecting a tool) back into Bluework (clarifying requirements and problem definition).
*   **Scenario 2 (Incident Response):** During a major system outage, rather than solely issuing directives, an architect might call for a brief "Bluework huddle": "Okay team, let's pause the immediate fixes for ten minutes. What do we know for sure? What are our top two hypotheses for the root cause? What's the safest next diagnostic step we can take?" This practice of calling a time-out, even when one isn't explicitly demanded by the situation, helps normalize the act of pausing.
*   **Scenario 3 (Agile Context):** An architect can proactively embed "architectural reflection" slots into sprint planning or review meetings. This ensures dedicated time for Bluework concerning upcoming epics or addressing accumulated technical debt. For example: "Before we commit to these user stories for the next sprint, let's spend 30 minutes discussing the architectural implications of Feature X and any potential long-term impacts."

Effectively "Controlling the Clock" serves as a crucial prerequisite for genuine "Collaboration" (Play 2) and meaningful "Improvement" (Play 5). Without the intentional pause created by this play, there is simply no space for diverse opinions to surface, for thorough discussion to occur, or for valuable learning to take place. If architects do not consciously create these moments for reflection, discussions are likely to be rushed, dominant voices may inadvertently overshadow others, and true collaboration will remain elusive. Similarly, improvement necessitates reflection, which is only possible during such pauses. Thus, architects who master the art of "Controlling the Clock" unlock the potential of several other vital leadership plays. For architects, this play is also a key mechanism for ensuring their work remains "grounded" in strategic objectives and data-driven insights, as advocated by the Grounded Architecture philosophy , rather than being swept away by the tide of short-term project momentum. Rushing (obeying the clock) often leads to cutting corners on essential data gathering or strategic thinking. By "controlling the clock," architects create opportunities to review data, consult with stakeholders (thereby leveraging collaborative networks ), and ensure that architectural choices align with broader organizational goals. This practice helps prevent the "Ivory Tower" architect syndrome, where architects become disconnected from the practical realities and needs of the organization.

### B. Play 2: Collaborate, Don't Coerce

**Introduction to the Play:**
The "Collaborate, Don't Coerce" play champions true collaboration by actively inviting and valuing diverse perspectives, rather than leaders subtly or overtly pushing their own agenda. A central tenet is to "let the doers be the deciders," empowering those closest to the work to contribute meaningfully to decisions. Key techniques to foster this include "vote first, then discuss," which helps prevent the group from anchoring on the leader's opinion. Leaders are encouraged to speak last, after they have heard from others, and to cultivate genuine curiosity about dissenting viewpoints, perhaps by asking, "What do you see that we don't?". Creating an environment of psychological safety, where individuals feel comfortable sharing their honest thoughts without fear of judgment, is paramount for this play to succeed.

<br>
<img style="margin-top: -20px; width: 100%; height: 400px; object-fit: cover" 
     src="assets/images/istock/iStock-1845563955.jpg">
<div style="font-size: 70%; margin-top: -16px; color: grey; margin-bottom: 12px">
Image by <a target="_blank" href="https://www.istockphoto.com/en/portfolio/olm26250">Olivier Le Moal</a> from <a target="_blank" href="https://www.istockphoto.com/">iStock</a>
</div>

**Relevance for IT Architects:**
Architects require buy-in and active participation from a wide array of stakeholders, including developers, product managers, operations teams, and business units. Coercion might yield superficial compliance, but genuine collaboration leads to deeper commitment, more robust solutions, and shared ownership. Complex architectural problems, which are the norm in modern IT, benefit immensely from cognitive diversity; collaboration is the key to unlocking this collective intelligence.

**Examples in IT Architecture:**
*   **Scenario 1 (Technology Selection):** An architect is tasked with selecting a new messaging queue technology for the organization. Instead of stating their initial preference, they present the problem, outline the selection criteria, and then ask team members to independently write down their top one or two choices along with their reasoning ("vote first"). Following this, the architect facilitates a discussion, ensuring all voices are heard by asking clarifying questions and probing different perspectives. They offer their own assessment only after everyone else has had a chance to speak.
*   **Scenario 2 (Design Review):** During a review of a proposed microservice architecture, a junior engineer expresses a concern about potential data consistency issues. Instead of dismissing the concern or providing an immediate rebuttal, the architect responds with curiosity: "That's an interesting point. Tell me more about that. What specific scenarios are you envisioning where consistency might become an issue? What do you see that perhaps the rest of us are missing?" This approach validates the contribution and encourages deeper exploration.
*   **Scenario 3 (Architectural Principles Co-creation):** An architect facilitates a workshop with lead engineers from various teams to define a new set of architectural principles for the company. They provide a guiding framework and some initial examples but actively encourage the team to generate, debate, and refine the principles themselves. The architect acts as a facilitator and guide, rather than a dictator of terms, asking questions like, "Our goal is to co-create these guiding statements. What are the most critical principles we need to ensure consistency, scalability, and maintainability for our platform moving forward?"

The ongoing trend towards distributed systems, microservices, and cross-functional agile teams in IT makes the "Collaborate, Don't Coerce" play increasingly vital. Architects operating in such environments cannot effectively dictate solutions from on high; their success hinges on their ability to facilitate, integrate, and harmonize diverse technical expertise and perspectives. An architect cannot be the foremost expert in every component of a complex, distributed system. Therefore, their capacity to collaborate effectively with these diverse specialists, rather than attempting to coerce them into a singular, preconceived vision, becomes a primary determinant of architectural quality and adoption. This play is a direct enabler of leveraging the "collaborative networks" that are central to the Grounded Architecture philosophy. However, a common pitfall for architects is "disguised coercion"—believing they are collaborating when, in fact, they are subtly steering the conversation towards their preferred outcome. Architects, often being senior and highly experienced, might unintentionally coerce through the strength of their opinions, the way they frame questions, or by selectively amplifying certain viewpoints. This play requires genuine humility and a sincere willingness to be proven wrong or to adopt a solution that differs from one's initial inclination. This can represent a significant mindset shift for some architects, moving away from the traditional image of the "architect as the ultimate authority" towards one of "architect as the facilitator of collective wisdom."

### C. Play 3: Commit, Don't Comply

**Introduction to the Play:**
The "Commit, Don't Comply" play focuses on achieving genuine, internally motivated commitment from the team, which is the key to unlocking discretionary effort. This stands in stark contrast to mere compliance, which typically yields only the minimum necessary effort to meet requirements. Commitment is an active choice made by individuals and is often fostered when true collaboration has preceded the decision-making process. This play encourages commitment to *learn* (not just to execute a task blindly) and commitment to *actions* (even if individual beliefs or preferences don't perfectly align with the chosen path). The linguistic shift from "I can't" (implying an external force and fostering compliance) to "I don't" (signifying internal resolve and commitment) illustrates this principle.

<br>
<img style="margin-top: -20px; width: 100%; height: 400px; object-fit: cover" 
     src="assets/images/istock/iStock-615426408.jpg">
<div style="font-size: 70%; margin-top: -16px; color: grey; margin-bottom: 12px">
Image by <a target="_blank" href="https://www.istockphoto.com/en/portfolio/akinbostanci">akinbostanci</a> from <a target="_blank" href="https://www.istockphoto.com/">iStock</a>
</div>

**Relevance for IT Architects:**
Architectural standards, patterns, and strategic decisions are only truly effective if development teams genuinely commit to their adoption and implementation. Compliance often leads to superficial adherence, workarounds, or eventual abandonment. Driving significant architectural change, such as a platform modernization or the adoption of new paradigms, requires deep and sustained commitment from engineering teams to navigate the inevitable challenges and see the initiative through to successful completion.

**Examples in IT Architecture:**
*   **Scenario 1 (Adopting a New Standard):** Following a collaborative process (Play 2) to select a new API security standard, the architect seeks explicit commitment from the involved teams. They might say, "We've thoroughly discussed the options and have collectively chosen this standard. What support do you need from the architecture team and from each other to fully commit to implementing this standard for all new services going forward? What potential roadblocks can we anticipate now and plan for together?" This language frames the adoption as a shared goal and responsibility.
*   **Scenario 2 (Proof of Concept):** An architect initiates a Proof of Concept (PoC) for a new, potentially transformative technology. Instead of merely assigning tasks, they frame the initiative to encourage a commitment to learning: "Our primary goal for this PoC is to *learn* whether this technology can effectively solve X problem for us and to gain a clear understanding of its operational complexities and integration challenges. Let's commit to these specific learning objectives and the actions required to achieve them over the next two weeks.".
*   **Scenario 3 (Decision Disagreement):** A team, after due deliberation, has decided on an architectural approach that the architect has some reservations about, though it's not a critically flawed decision. The architect might articulate their support by saying: "While I see some potential challenges with this path, the team has made a strong case and has collectively decided to proceed. I commit to supporting your decision and will help you succeed in its implementation. Let's agree on the key actions, milestones, and check-in points to ensure we can address any issues that arise." This demonstrates commitment to the team's chosen action, even if personal belief isn't absolute.

True "Commitment" is very often an outcome of effective "Collaboration." Attempts by architects to secure commitment without first engaging in genuine, inclusive collaboration are likely to result in, at best, superficial compliance. If architects skip or poorly execute the "Collaborate" play—for example, by subtly coercing the team towards a predetermined solution—team members will not feel a sense of ownership over the decisions made. Consequently, their adherence will be driven by compliance ("I'm doing this because the architect said so") rather than by true commitment ("I'm doing this because I believe in its value, understand its rationale, and had a meaningful say in the decision"). This directly impacts the quality, sustainability, and ultimate success of architectural implementations. The "Commit, not Comply" play is also crucial for the effective functioning of "adaptable governance models (nudging, taxation, mandates)" as described within the Grounded Architecture framework. While mandates represent a top-down enforcement of compliance, mechanisms like nudging and taxation rely more on influencing behavior and fostering commitment rather than imposing strict adherence. These softer forms of governance aim to guide choices by making desirable architectural behaviors easier or more attractive. This requires a degree of voluntary buy-in or commitment from the teams. Architects who effectively use the "Commit" play can cultivate this necessary buy-in, thereby making these more nuanced governance mechanisms viable and effective. Without underlying commitment, nudges are likely to be ignored, and architectural "taxation" (e.g., allocating more resources to teams adopting preferred patterns) might be perceived as punitive rather than supportive.

### D. Play 4: Complete, Don't Continue

**Introduction to the Play:**
The "Complete, Don't Continue" play directly counters the Industrial Age mindset of continuous, undifferentiated, and often unending work. Instead, it emphasizes breaking down work into defined, manageable chunks with clear completion points. A key aspect of this play is the importance of celebrating successes upon completion and extracting learnings from each completed cycle. The principle of "Chunk it small, but do it all" is particularly relevant, especially when dealing with high levels of uncertainty or complexity. This involves deciding explicitly when to stop a particular phase of work and having agreed-upon stopping criteria or definitions of "done".

<br>
<img style="margin-top: -20px; width: 100%; height: 400px; object-fit: cover" 
     src="assets/images/istock/iStock-1548203309.jpg">
<div style="font-size: 70%; margin-top: -16px; color: grey; margin-bottom: 12px">
Image by <a target="_blank" href="https://www.istockphoto.com/en/portfolio/PakinJarerndee">Pakin Jarerndee</a> from <a target="_blank" href="https://www.istockphoto.com/">iStock</a>
</div>

**Relevance for IT Architects:**
Architectural initiatives, such as platform migrations, system redesigns, or the rollout of new enterprise-wide standards, can be large, complex, and long-running. Breaking these substantial undertakings into smaller, completable phases or milestones is crucial for maintaining momentum, providing opportunities for iterative learning and adjustment, and fostering a sense of accomplishment within the team. This play helps architects avoid "architectural drift," where designs are endlessly refined without delivering tangible value, or the "analysis paralysis" that can stall progress indefinitely.

**Examples in IT Architecture:**
*   **Scenario 1 (Platform Modernization):** An architect leading a multi-year platform modernization initiative works with the teams to define clear, completable stages with measurable outcomes. For instance: "Stage 1: Migrate User Authentication Service to the new microservices platform. Target completion: End of Q2. Success criteria: 100% of user authentication requests handled by the new service with improved performance metrics." Upon successful completion, the team celebrates this milestone.
*   **Scenario 2 (Design Spike):** When faced with a complex new feature requiring significant architectural design, an architect initiates a time-boxed design spike (e.g., one week) with a very specific, completable goal: "By the end of this week, we will have a documented decision on the data storage strategy for Feature Y, including a comparative analysis of the top two alternatives and the rationale for our choice. This document will represent 'complete' for this design spike.".
*   **Scenario 3 (Architectural Debt Reduction):** Instead of pursuing a vague and potentially demoralizing goal like "reduce overall technical debt," an architect collaborates with engineering teams to identify specific, completable pieces of technical debt to be addressed each quarter. The successful refactoring or elimination of these items is then acknowledged and celebrated. For example: "This quarter, our focus is to complete the refactoring of the Legacy Billing Module's outdated interface, thereby eliminating a significant source of maintenance overhead."

The "Complete" play, by creating defined end-points for work increments and incorporating celebrations of achievement, directly fuels team morale and reinforces positive behaviors. This, in turn, creates a virtuous cycle, making future "Commitment" (Play 3) easier to achieve. When successes are acknowledged and celebrated, it reinforces the specific behaviors that led to that success and allows individuals to feel a tangible sense of accomplishment. This positive momentum and the trust it builds make teams more likely to commit enthusiastically to the next defined chunk of work. Furthermore, this play is vital for demonstrating tangible progress and showcasing the value delivered by the architecture function. This aligns directly with the "Grounded Architecture" principle of needing to show impact and execute effectively at scale. Architecture can sometimes be perceived as an abstract, slow-moving discipline, occasionally leading to accusations of architects operating in an "Ivory Tower," disconnected from practical delivery. The "Complete" play, by focusing on delivering defined architectural outcomes in manageable chunks, makes the value of architecture visible, measurable, and timely. This helps in justifying architectural investments, building credibility for the architecture practice within the organization, and supporting the "executing at scale" goal of Grounded Architecture. It also provides clear points at which "Lightweight Architectural Analytics" can be applied to measure progress, impact, and adherence to architectural goals.

### E. Play 5: Improve, Don't Prove

**Introduction to the Play:**
The "Improve, Don't Prove" play advocates for a fundamental shift in mindset: from an environment where individuals feel the need to constantly "prove" their competence or the infallibility of their decisions, to one that fosters a collective focus on "improving" outcomes, processes, and shared learning. This play encourages a culture of curiosity and reflection, prompting questions like, "How could we make this better?" or "What can we learn from this experience?". It cultivates a learning culture where mistakes and setbacks are viewed not as reasons for blame or shame, but as valuable opportunities for growth and refinement. Leaders model this by openly reflecting on their own actions and how they might have been improved.

**Relevance for IT Architects:**
Architecture is inherently an iterative and evolutionary process; initial designs are rarely perfect and must adapt to new information, changing requirements, and feedback from implementation. An "improve" mindset allows architectural solutions to evolve and adapt gracefully. This play is also crucial for fostering psychological safety within teams, encouraging engineers and other stakeholders to flag potential issues or weaknesses in architectural designs or decisions without fear of retribution or of appearing incompetent.

**Examples in IT Architecture:**
*   **Scenario 1 (Post-Incident Review):** Following a significant system failure that was traced back to an unforeseen architectural flaw, the architect leads a blameless post-mortem. The language used focuses entirely on learning and improvement: "What can we *learn* from this incident as a team? How can we *improve* our design process, our review mechanisms, or our monitoring capabilities to prevent similar issues from occurring in the future?".
*   **Scenario 2 (New Technology Adoption):** An architect is spearheading the introduction of a new software framework into the organization. Instead of demanding immediate perfection or setting up a situation where the team feels they must "prove" the framework's viability at all costs, they frame the initiative as an improvement opportunity: "Let's pilot this new framework on Project X. Our primary goal is to *improve* our development velocity and code quality for this type_of service. What metrics will help us understand if we're achieving that improvement? What challenges are we encountering, and how can we adapt our approach or the framework's configuration to overcome them?".
*   **Scenario 3 (Architect Self-Reflection):** An architect openly shares a learning moment with their team, modeling vulnerability and an "improve" mindset: "Looking back at the initial design for System Z, I realize now that I didn't fully account for the long-term scalability needs under peak load conditions. That was an oversight on my part. How can *we*, as a team, build in more robust scalability checks and forecasting earlier in our design process next time to avoid this?".

The "Improve, not Prove" mindset is fundamental to creating and sustaining a culture of psychological safety within technical teams. Without this safety, team members are more likely to hide mistakes, downplay concerns, or avoid pointing out potential architectural flaws, all to avoid the risk of "proving" themselves incompetent or being blamed for problems. When the environment is predominantly focused on "proving," individuals naturally become risk-averse and defensive, which stifles learning and innovation. Architects who champion the "improve" mindset actively create the safety needed for open communication about what is not working. This open dialogue is critical for identifying and addressing architectural weaknesses before they escalate into major problems. This play, therefore, acts as a significant cultural enabler. Moreover, this play directly supports the core themes of "adaptability" and "continuous learning" that are central to the Grounded Architecture philosophy. Grounded Architecture is explicitly designed for "fast-moving, global organizations" and places a strong emphasis on the need for "adaptability" in architectural practices and solutions. The "Improve, not Prove" play institutionalizes this process of learning and adaptation. By consistently asking, "How can we make it better?" , architects ensure that both the architecture itself and the practices surrounding it are not static but are continuously refined and enhanced. This aligns perfectly with the need for an adaptable and evolving architectural approach capable of responding to changing business needs and technological landscapes. It also connects directly to the concept of "Lightweight Architectural Analytics" , as the data and insights derived from such analytics can be used to identify specific areas where improvements are needed or where adjustments to architectural strategy are warranted.

### F. Play 6: Connect, Don't Conform

**Introduction to the Play:**
The "Connect, Don't Conform" play encourages leaders to move beyond the constraints of hierarchical roles and the implicit expectations of conformity, and instead focus on building genuine human connections with their team members. It is about intentionally flattening power gradients, valuing individuals for their unique perspectives and contributions, and fostering an environment of mutual respect and trust. This involves leaders demonstrating vulnerability, showing that they care about people's thoughts, feelings, and personal goals, and extending trust first rather than demanding it be earned. The play contrasts the Industrial Age tendency to conform to one's hierarchical position with the modern need to genuinely connect with others as individuals.

**Relevance for IT Architects:**
IT architects often find themselves in positions where they need to influence outcomes without possessing direct managerial authority over all stakeholders. Building trust and rapport through genuine human connection is far more effective in these situations than relying on a job title or perceived hierarchical standing. Furthermore, understanding the diverse perspectives, motivations, and concerns of different teams—such as development, operations, security, and product management—is crucial for creating holistic, well-rounded, and widely accepted architectural solutions. This deep understanding is cultivated through connection, not conformity.

**Examples in IT Architecture:**
*   **Scenario 1 (Cross-Team Collaboration):** An architect working on a complex, enterprise-wide initiative makes a deliberate effort to have informal conversations (e.g., virtual coffees or brief one-on-one chats) with key members of different engineering teams. The purpose is not solely to discuss the project agenda, but to understand their world better: "I'd like to understand your team's perspective more deeply. What are your biggest pain points with the current platform, and what are your aspirations for how it could better support your work?" This demonstrates a care for what people think and how they feel.
*   **Scenario 2 (Handling Dissent):** In a design meeting where a particular architectural proposal is being debated, one engineer persistently voices strong criticisms. Instead of shutting down the critique or becoming defensive, the architect employing the "Connect" play might say: "I appreciate you pushing back on this and sharing your concerns so clearly. It's evident you have strong reservations. Let's make sure we fully understand your viewpoint. Help me see what you're seeing from your perspective." This language values the individual and their input, moving beyond simple role-based interaction and fostering a more open dialogue.
*   **Scenario 3 (Architect Admitting Uncertainty):** An architect, when faced with a novel and particularly challenging technical problem for which they don't have an immediate solution, shares their uncertainty with the team: "Honestly, I don't have a ready-made answer for this one. This is new territory for me as well. Let's explore this challenge together. What are your initial thoughts, ideas, or even gut feelings on how we might approach this?" Admitting "I don't know" demonstrates vulnerability, builds trust, and invites collaborative problem-solving.

"Connect, Don't Conform" can be seen as an overarching play that underpins and enhances the effectiveness of all the other leadership plays. Without genuine connection, mutual respect, and trust, attempts to truly "Collaborate," gain deep "Commitment," or foster a safe environment to "Improve" will likely be less effective and more superficial. If team members feel they are merely expected to conform to their roles or to the perceived hierarchy—acting as cogs in a machine—they are less likely to openly share their best ideas during collaboration, less inclined to genuinely commit to decisions, and will certainly not feel safe enough to point out flaws or suggest improvements. Connection builds the psychological safety and trust that are essential lubricants for all positive team interactions. It forms the relational foundation upon which effective architectural leadership is built. This play is also absolutely essential for nurturing the "collaborative networks" and fostering an understanding of "human factors" that are central pillars of the Grounded Architecture philosophy. Grounded Architecture explicitly calls out the importance of "Collaborative Networks" and dedicates attention to "On Human Complexity," which includes understanding cultural differences and cognitive biases. The act of "Connecting" is precisely how architects build, sustain, and enrich these vital networks. By moving beyond mere role conformity, architects can better understand individual motivations, appreciate cultural nuances (as highlighted by resources like "The Culture Map" mentioned in the Grounded Architecture context ), and adapt their communication styles. This leads to more effective collaboration, more human-centric architectural solutions, and ultimately, a more impactful architecture practice that truly addresses the "soft skills" aspect of being an effective architect.

## IV. Conclusion: Weaving the Plays into Your Architectural Practice

The six leadership plays from David Marquet's "Leadership is Language"—Control the Clock, Collaborate, Commit, Complete, Improve, and Connect—offer a powerful toolkit for IT Architects seeking to enhance their leadership effectiveness. Adopting these linguistic shifts has the transformative potential to move an architect's leadership style from a traditional, potentially less impactful mode to one that is significantly more empowering, collaborative, and results-oriented. These are not merely abstract theories; they are practical, actionable tools that can be implemented immediately by consciously changing the words we use in our daily interactions.

Architects are encouraged to begin by observing their own language and the prevailing linguistic patterns within their teams and organizations. Which plays resonate most strongly? Which address the most pressing current challenges? Starting small, perhaps by focusing on intentionally applying one or two plays, can build confidence and demonstrate tangible benefits. The consistent application of these plays by architects can create a positive ripple effect, influencing not just their immediate teams but also fostering a more constructive and innovative engineering culture across the broader organization. As architects model this new language of leadership, others may begin to adopt similar communication patterns, leading to a gradual but significant positive shift in how technical discussions are conducted, how decisions are made, and how individuals and teams interact. This can cultivate a more psychologically safe and innovative environment overall.

Ultimately, embracing these leadership plays aligns directly with the core tenets of "Grounded Architecture". By mastering this new language, architects can build stronger and more effective collaborative networks, make more robust and data-informed decisions (by creating the Bluework space necessary for diverse input and thorough analysis), enhance the adaptability of their architectures and practices, and deliver greater strategic value to their organizations. The journey to becoming a truly "Grounded Architect" is, in many ways, a journey in mastering the language of modern leadership. This is not a one-time transformation but a continuous improvement path, much like mastering any complex technology or methodology. It requires ongoing practice, conscious reflection, and a willingness to adapt and refine one's approach over time. This commitment to linguistic evolution is a hallmark of an architect dedicated to not only technical excellence but also to impactful and empowering leadership.

<br>
## Questions to Consider

* *Which of the six leadership plays (Control the Clock, Collaborate, Commit, Complete, Improve, Connect) do you feel is most lacking in your current team interactions, and what's one small linguistic change you could make this week to start addressing it?*
* *Think about a recent architectural decision or discussion. How could applying the "Control the Clock" play (e.g., calling a deliberate pause for Bluework) have potentially improved the outcome or the process?*
* *When was the last time you consciously used language to "Collaborate, Don't Coerce"? How did you ensure diverse perspectives were heard before your own (e.g., "vote first, then discuss")?* 
* *Consider a current architectural standard or initiative. Are your teams truly "Committed," or are they merely "Complying"? What language could you use to shift towards genuine commitment?* 
* *How can you apply the "Complete, Don't Continue" play to break down a large, ongoing architectural effort into smaller, more manageable, and celebratable milestones?*
* *Reflect on a recent project setback or architectural challenge. How could an "Improve, Don't Prove" mindset have changed the team's approach to learning from the experience?* 
* *In what ways can you intentionally "Connect, Don't Conform" to build stronger relationships and flatten power gradients with stakeholders outside your direct team?*
* *How often do you find yourself or your team stuck in "Redwork" (doing) without sufficient "Bluework" (thinking/planning)? What triggers could you establish to prompt a shift?* 
* *How might the "power gradient" in your organization be subtly influencing architectural discussions, and what specific phrases from Marquet's plays could help mitigate this?* 
* *What is one "Industrial Age" leadership phrase you commonly use or hear that you could replace with a "New Playbook" alternative to foster better architectural outcomes?*
